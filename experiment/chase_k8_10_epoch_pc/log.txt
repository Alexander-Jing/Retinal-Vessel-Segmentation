MainNet(
  (s1): EnhanceNetve(
    (conv1): Sequential(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (1): PReLU(num_parameters=1)
      (2): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (3): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv2): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv3): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv4): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv5): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (upconv1): ConvTranspose2d(64, 32, kernel_size=(2, 2), stride=(2, 2))
    (upconv2): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))
    (upconv3): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))
    (upconv4): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))
    (conv6): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv7): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv8): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv9): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv11): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(35, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(35, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(6, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (last_act): PReLU(num_parameters=1)
  )
  (s2): SegNetvec(
    (conv1): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(6, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(6, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv2): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv3): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv4): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv5): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
    (upconv1): ConvTranspose2d(64, 32, kernel_size=(2, 2), stride=(2, 2))
    (upconv2): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))
    (upconv3): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))
    (upconv4): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))
    (conv6): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv7): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv8): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv9): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(64, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (conv11): Sequential(
      (0): PReLU(num_parameters=1)
      (1): BatchNorm2d(38, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): Conv2d(38, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (3): PReLU(num_parameters=1)
      (4): BatchNorm2d(1, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (5): Conv2d(1, 1, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (last_act): PReLU(num_parameters=1)
  )
)
[Epoch 1]	Learning rate: 1.00e-4
[1600/16000]	[BCE: 1.5794]	37.7+5.5s
[3200/16000]	[BCE: 1.5068]	35.6+2.3s
[4800/16000]	[BCE: 1.4557]	36.2+1.6s
[6400/16000]	[BCE: 1.4095]	35.9+3.0s
[8000/16000]	[BCE: 1.3688]	35.8+3.6s
[9600/16000]	[BCE: 1.3319]	36.0+2.9s
[11200/16000]	[BCE: 1.2979]	36.7+5.1s
[12800/16000]	[BCE: 1.2648]	35.9+2.4s
[14400/16000]	[BCE: 1.2339]	35.9+4.4s
[16000/16000]	[BCE: 1.2049]	36.1+1.7s

Evaluation:
[CHASET x1]	DICE Score: 0.709929 (Best: 0.709929 @epoch 1)
Forward: 15.65s

Saving...
Total: 18.40s

[Epoch 2]	Learning rate: 1.00e-4
[1600/16000]	[BCE: 0.9088]	35.8+6.4s
[3200/16000]	[BCE: 0.8871]	35.7+1.7s
[4800/16000]	[BCE: 0.8641]	35.9+1.6s
[6400/16000]	[BCE: 0.8448]	36.1+1.6s
[8000/16000]	[BCE: 0.8263]	36.0+1.6s
[9600/16000]	[BCE: 0.8083]	35.6+1.8s
[11200/16000]	[BCE: 0.7912]	35.9+1.5s
[12800/16000]	[BCE: 0.7758]	35.8+1.5s
[14400/16000]	[BCE: 0.7608]	35.9+1.8s
[16000/16000]	[BCE: 0.7462]	35.6+4.1s

Evaluation:
[CHASET x1]	DICE Score: 0.800618 (Best: 0.800618 @epoch 2)
Forward: 15.20s

Saving...
Total: 17.63s

[Epoch 3]	Learning rate: 1.00e-4
[1600/16000]	[BCE: 0.5876]	35.9+5.0s
[3200/16000]	[BCE: 0.5767]	36.1+3.4s
[4800/16000]	[BCE: 0.5654]	36.0+2.3s
[6400/16000]	[BCE: 0.5549]	35.9+2.7s
[8000/16000]	[BCE: 0.5453]	35.7+2.1s
[9600/16000]	[BCE: 0.5359]	35.7+1.6s
[11200/16000]	[BCE: 0.5275]	36.3+2.5s
[12800/16000]	[BCE: 0.5191]	36.0+3.1s
[14400/16000]	[BCE: 0.5109]	36.1+1.6s
[16000/16000]	[BCE: 0.5034]	35.9+2.7s

Evaluation:
[CHASET x1]	DICE Score: 0.818530 (Best: 0.818530 @epoch 3)
Forward: 15.24s

Saving...
Total: 17.95s

[Epoch 4]	Learning rate: 1.00e-4
[1600/16000]	[BCE: 0.4211]	36.4+6.5s
[3200/16000]	[BCE: 0.4146]	36.4+3.0s
[4800/16000]	[BCE: 0.4093]	36.0+1.6s
[6400/16000]	[BCE: 0.4039]	35.6+2.3s
[8000/16000]	[BCE: 0.3982]	35.9+1.8s
[9600/16000]	[BCE: 0.3937]	35.8+2.1s
[11200/16000]	[BCE: 0.3889]	35.7+1.9s
[12800/16000]	[BCE: 0.3843]	35.8+2.2s
[14400/16000]	[BCE: 0.3798]	36.0+2.6s
[16000/16000]	[BCE: 0.3756]	35.9+1.5s

Evaluation:
[CHASET x1]	DICE Score: 0.819648 (Best: 0.819648 @epoch 4)
Forward: 15.22s

Saving...
Total: 17.63s

[Epoch 5]	Learning rate: 1.00e-4
[1600/16000]	[BCE: 0.3298]	35.7+5.0s
[3200/16000]	[BCE: 0.3279]	35.8+2.9s
[4800/16000]	[BCE: 0.3256]	36.0+1.6s
[6400/16000]	[BCE: 0.3232]	35.6+2.3s
[8000/16000]	[BCE: 0.3206]	35.8+1.5s
[9600/16000]	[BCE: 0.3181]	35.9+3.2s
[11200/16000]	[BCE: 0.3155]	35.8+1.6s
[12800/16000]	[BCE: 0.3136]	36.4+3.8s
[14400/16000]	[BCE: 0.3115]	35.9+2.4s
[16000/16000]	[BCE: 0.3096]	35.6+1.9s

Evaluation:
[CHASET x1]	DICE Score: 0.819471 (Best: 0.819648 @epoch 4)
Forward: 15.21s

Saving...
Total: 17.64s

[Epoch 6]	Learning rate: 1.00e-4
[1600/16000]	[BCE: 0.3110]	35.8+4.1s
[3200/16000]	[BCE: 0.3043]	36.2+1.6s
[4800/16000]	[BCE: 0.2997]	36.3+2.4s
[6400/16000]	[BCE: 0.2951]	35.7+1.8s
[8000/16000]	[BCE: 0.2917]	35.7+1.5s
[9600/16000]	[BCE: 0.2903]	36.0+1.6s
[11200/16000]	[BCE: 0.2881]	36.0+1.7s
[12800/16000]	[BCE: 0.2862]	36.0+1.6s
[14400/16000]	[BCE: 0.2847]	35.7+2.2s
[16000/16000]	[BCE: 0.2827]	35.9+1.6s

Evaluation:
[CHASET x1]	DICE Score: 0.815995 (Best: 0.819648 @epoch 4)
Forward: 15.47s

Saving...
Total: 17.58s

[Epoch 7]	Learning rate: 1.00e-4
[1600/16000]	[BCE: 0.2643]	35.5+4.6s
[3200/16000]	[BCE: 0.2635]	35.9+2.4s
[4800/16000]	[BCE: 0.2626]	35.9+2.9s
[6400/16000]	[BCE: 0.2630]	35.8+3.0s
[8000/16000]	[BCE: 0.2625]	36.1+1.6s
[9600/16000]	[BCE: 0.2615]	35.9+3.1s
[11200/16000]	[BCE: 0.2606]	35.8+2.1s
[12800/16000]	[BCE: 0.2604]	35.9+1.6s
[14400/16000]	[BCE: 0.2595]	36.7+2.4s
[16000/16000]	[BCE: 0.2586]	35.8+3.2s

Evaluation:
[CHASET x1]	DICE Score: 0.821878 (Best: 0.821878 @epoch 7)
Forward: 15.44s

Saving...
Total: 17.72s

[Epoch 8]	Learning rate: 1.00e-4
[1600/16000]	[BCE: 0.2512]	35.7+5.2s
[3200/16000]	[BCE: 0.2518]	35.8+1.5s
[4800/16000]	[BCE: 0.2511]	36.3+3.6s
[6400/16000]	[BCE: 0.2501]	36.4+2.6s
[8000/16000]	[BCE: 0.2493]	35.8+3.2s
[9600/16000]	[BCE: 0.2482]	36.1+1.9s
[11200/16000]	[BCE: 0.2471]	36.1+2.1s
[12800/16000]	[BCE: 0.2462]	35.9+2.5s
[14400/16000]	[BCE: 0.2459]	35.9+2.8s
[16000/16000]	[BCE: 0.2456]	35.8+1.5s

Evaluation:
[CHASET x1]	DICE Score: 0.822285 (Best: 0.822285 @epoch 8)
Forward: 15.26s

Saving...
Total: 17.68s

[Epoch 9]	Learning rate: 1.00e-4
[1600/16000]	[BCE: 0.2441]	35.7+6.5s
[3200/16000]	[BCE: 0.2432]	35.7+1.8s
[4800/16000]	[BCE: 0.2420]	35.8+3.0s
[6400/16000]	[BCE: 0.2422]	36.3+2.0s
[8000/16000]	[BCE: 0.2420]	35.9+2.3s
[9600/16000]	[BCE: 0.2414]	36.0+2.6s
[11200/16000]	[BCE: 0.2413]	35.9+2.3s
[12800/16000]	[BCE: 0.2407]	36.1+1.6s
[14400/16000]	[BCE: 0.2402]	36.6+2.7s
[16000/16000]	[BCE: 0.2397]	36.4+3.1s

Evaluation:
[CHASET x1]	DICE Score: 0.824195 (Best: 0.824195 @epoch 9)
Forward: 14.97s

Saving...
Total: 17.30s

